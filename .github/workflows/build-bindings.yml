name: 'Build wheels'
run-name: 'Build wheels (nodejs-tags=${{ inputs.nodejs-tags }}, platform-tag=${{ inputs.platform-tag }}, run_tests=${{ inputs.run_tests }}, use-server-rc=${{ inputs.use-server-rc }}, server-tag=${{ inputs.server-tag }})'

# Build wheels on all (or select) Python versions supported by the Python client for a specific platform

on:
  workflow_dispatch:
    inputs:
      # These are the usual cases for building wheels:
      #
      # 1. One wheel for *one* supported Python version. This is for running specialized tests that only need one Python version
      # like valgrind or a failing QE test. And usually, we only need one wheel for debugging purposes.
      # 2. Wheels for *all* supported Python versions for *one* supported platform. This is useful for testing workflow changes for a
      # single OS or CPU architecture (e.g testing that changes to debugging modes work on all Python versions)
      # 3. Wheels for *all* supported Python versions and *all* supported platforms. This is for building wheels for different
      # CI/CD stages (e.g dev, stage, or master). We can also test debugging modes for all platforms that support them
      #
      # We're able to combine case 1 and 2 into one workflow by creating an input that takes in a JSON list of strings (Python tags)
      # to build wheels for. Actual list inputs aren't supported yet, so it's actually a JSON list encoded as a string.
      #
      # However, it's harder to combine this workflow (case 1 + 2) with case 3, because matrix outputs don't exist yet
      # in Github Actions. So all jobs in the cibuildwheel job would have to pass for a self hosted job to run.
      # We want each platform to be tested independently of each other,
      # so there is a wrapper workflow that has a list of platforms to test and reuses this workflow for each platform.
      # If one platform fails, it will not affect the building and testing of another platform (we disable fail fast mode)
      nodejs-tags:
        type: string
        description: Valid JSON list of Python tags to build the client for
        required: false
        default: '[["v108", "18"], ["v115", "20"], ["v127", "22"], ["v131", "23"]]'
      platform-tag:
        description: Platform to build the client for.
        type: choice
        required: true
        options:
        - manylinux_x86_64
        - manylinux_aarch64
        - manylinux_20_x86_64
        - manylinux_20_aarch64
        #- macosx_x86_64
        #- macosx_arm64
        #- win_amd64
        # Makes debugging via gh cli easier.
        default: manylinux_x86_64
      run_tests:
        description: 'Run Aerospike server and run tests using built wheels?'
        type: boolean
        required: false
        default: false
      use-server-rc:
        type: boolean
        required: true
        default: false
        description: 'Test against server release candidate?'
      server-tag:
        required: true
        default: 'latest'
        description: 'Server docker image tag'
      test-file:
        required: false
        default: ''
        description: 'new_tests/<value>'

  workflow_call:
    inputs:
      # See workflow call hack in update-version.yml
      is_workflow_call:
        type: boolean
        default: true
        required: false
      nodejs-tags:
        type: string
        required: false
        default: '[["v108", "18"], ["v115", "20"], ["v127", "22"], ["v131", "23"]]'
      platform-tag:
        type: string
        required: true
      run_tests:
        type: boolean
        required: false
        default: false
      use-server-rc:
        required: false
        type: boolean
        default: false
        description: 'Test against server release candidate?'
      server-tag:
        required: false
        type: string
        default: 'latest'
        description: 'Server docker image tag'
      test-file:
        required: false
        type: string
        default: ''
    secrets:
      # Just make all the secrets required to make things simpler...
      DOCKER_HUB_BOT_USERNAME:
        required: true
      DOCKER_HUB_BOT_PW:
        required: true
      MAC_M1_SELF_HOSTED_RUNNER_PW:
        required: true

jobs:
  # Maps don't exist in Github Actions, so we have to store the map using a script and fetch it in a job
  # This uses up more billing minutes (rounded up to 1 minute for each job run),
  # but this should be ok based on the minutes usage data for the aerospike organization
  get-runner-os:
    outputs:
      runner-os: ${{ steps.get-runner-os.outputs.runner_os }}
    runs-on: ubuntu-22.04
    steps:
    - id: get-runner-os
      # Single source of truth for which runner OS to use for each platform tag
      run: |
        declare -A hashmap
        hashmap[manylinux_x86_64]="ubuntu-22.04"
        hashmap[manylinux_aarch64]="22.04A"
        hashmap[manylinux_20_x86_64]="20.04"
        hashmap[manylinux_20_aarch64]="20.04A"
        hashmap[macosx_x86_64]="macos-13-large"
        hashmap[macosx_arm64]="SMA"
        hashmap[win_amd64]="windows-2022"
        echo runner_os=${hashmap[${{ inputs.platform-tag }}]} >> $GITHUB_OUTPUT
      # Bash >= 4 supports hashmaps
      shell: bash


  cibuildbinding:
    needs: get-runner-os
    strategy:
      matrix:
        nodejs-tag: ${{ fromJSON(inputs.nodejs-tags) }}
      fail-fast: false
    runs-on: ${{ needs.get-runner-os.outputs.runner-os }}
    env:
      BUILD_IDENTIFIER: "${{ matrix.nodejs-tag[0] }}-${{ inputs.platform-tag }}"
      MACOS_OPENSSL_VERSION: 3
    steps:
    - name: Create status check message
      run: echo STATUS_CHECK_MESSAGE="cibuildbinding (${{ env.BUILD_IDENTIFIER }})" >> $GITHUB_ENV
      shell: bash

    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
        context: ${{ env.STATUS_CHECK_MESSAGE }}

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
        # We need the last tag before the ref, so we can relabel the version if needed
        fetch-depth: 0

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.nodejs-tag[1] }}

    - name: 'Windows: Install C client deps'
      if: ${{ inputs.platform-tag == 'win_amd64' }}
      run: nuget restore
      working-directory: aerospike-client-c/vs

    - name: 'macOS x86: Setup Docker using colima for testing'
      if: ${{ inputs.platform-tag == 'macosx_x86_64' }}
      uses: ./.github/actions/setup-docker-on-macos

    - name: 'macOS x86: run Aerospike server in Docker container and connect via localhost'
      if: ${{ inputs.platform-tag == 'macosx_x86_64' }}
      uses: ./.github/actions/run-ee-server-for-ext-container
      with:
        use-server-rc: ${{ inputs.use-server-rc }}
        server-tag: ${{ inputs.server-tag }}
        docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    - name: Remove aerospike docker image
      if: ${{ (inputs.platform-tag == 'manylinux_aarch64' || inputs.platform-tag == 'manylinux_20_x86_64' || inputs.platform-tag == 'manylinux_20_aarch64') }}
      run: |
        if docker ps -aq | grep -q .; then
          docker rm -f $(docker ps -aq) || echo "Failed to remove one or more containers."
        else
          echo "No containers to remove."
        fi

    # TODO: combine this composite action and the above into one
    - name: "Linux: run Aerospike server in Docker container and configure config.conf to connect to the server container's Docker IP address"
      if: ${{ startsWith(inputs.platform-tag, 'manylinux') }}
      uses: ./.github/actions/run-ee-server-for-ext-container
      with:
        use-server-rc: ${{ inputs.use-server-rc }}
        server-tag: ${{ inputs.server-tag }}
        docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    # FIND NO SERVER TESTS AND RUN THEM
    #
    #- name: If not running tests against server, only run basic import test
    #  if: ${{ env.RUN_INTEGRATION_TESTS_IN_CIBW == 'false' }}
    #  # Use double quotes otherwise Windows will throw this error in cibuildwheel
    #  # 'import
    #  #       ^
    #  # SyntaxError: EOL while scanning string literal
    #  run: echo "TEST_COMMAND=python -c \"import aerospike\"" >> $GITHUB_ENV
    #  shell: bash

    #- name: Otherwise, enable integration tests
    #  if: ${{ env.RUN_INTEGRATION_TESTS_IN_CIBW == 'true' }}
    #  run: echo "TEST_COMMAND=cd ts-test;
    #    npm install typescript --save-dev;
    #    npx tsc;
    #    cd ..;
    #    npm run test dist/ -- --h 127.0.0.1 --port 3000" >> $GITHUB_ENV
    #  shell: bash


    - name: Build Binding
      run: |
        ./scripts/build-c-client.sh;
        npm install;

    - name: Run tests
      if: ${{ inputs.run_tests && startsWith(inputs.platform-tag, 'manylinux') }}
      run: |
        docker ps;
        docker logs aerospike;
        cd ts-test;
        npm install typescript --save-dev;
        npx tsc;
        cd ..;
        npx tsc;
        npm run test dist/${{ inputs.test-file }} -- --h 172.17.0.2 --port 3000 --U superuser --P superuser;

    - name: Run tests
      if: ${{ inputs.run_tests && inputs.platform-tag == 'macosx_x86_64'}}
      run: |
        docker ps;
        docker logs aerospike;
        cd ts-test;
        npm install typescript --save-dev;
        npx tsc;
        cd ..;
        npx tsc;
        npm run test dist/${{ inputs.test-file }} -- --h localhost --port 3000  --t 15000 --U superuser --P superuser;


    - name: Upload wheels to GitHub Linux x86
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'manylinux_x86_64' }}
      with:
        path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-linux-x64/aerospike.node
        name: ${{ env.BUILD_IDENTIFIER }}.node

    - name: Upload wheels to GitHub Linux 20 x86
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'manylinux_20_x86_64' }}
      with:
        path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-linux-x64/aerospike.node
        name: ${{ env.BUILD_IDENTIFIER }}.node

    - name: Upload wheels to GitHub Linux aarch64
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'manylinux_aarch64' }}
      with:
        path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-linux-arm64/aerospike.node
        name: ${{ env.BUILD_IDENTIFIER }}.node

    - name: Upload wheels to GitHub Linux 20 aarch64
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'manylinux_20_aarch64' }}
      with:
        path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-linux-arm64/aerospike.node
        name: ${{ env.BUILD_IDENTIFIER }}.node

    - name: Upload wheels to GitHub Mac x86
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'macosx_x86_64' }}
      with:
        path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-darwin-x64/aerospike.node
        name: ${{ env.BUILD_IDENTIFIER }}.node

    - name: Upload wheels to GitHub Mac Arm
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'macosx_arm64' }}
      with:
        path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-darwin-arm64/aerospike.node
        name: ${{ env.BUILD_IDENTIFIER }}.node


    - name: Cleanup Artifacts
      if: ${{ inputs.platform-tag == 'win_amd64' }}
      shell: pwsh
      run: |
        Remove-Item -Recurse -Force .\build\release\obj
        Remove-Item -Force .\build\release\aerospike.pdb
        Remove-Item -Force .\build\release\aerospike.ipdb
        Remove-Item -Force .\build\release\aerospike.iobj

    - name: Upload wheels to GitHub Windows
      uses: actions/upload-artifact@v4
      if: ${{ inputs.platform-tag == 'win_amd64' }}
      with:
        path: ./build/Release/*
        name: ${{ env.BUILD_IDENTIFIER }}.node

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
        status: ${{ job.status }}
        context: ${{ env.STATUS_CHECK_MESSAGE }}

  test-self-hosted:
    needs: cibuildbinding
    # There's a top-level env variable for this but we can't use it here, unfortunately
    if: ${{ inputs.run_tests && (inputs.platform-tag == 'macosx_arm64' || inputs.platform-tag == 'win_amd64') }}
    strategy:
      fail-fast: false
      matrix:
        nodejs-tag: ${{ fromJSON(inputs.nodejs-tags) }}
    runs-on: ${{ inputs.platform-tag == 'macosx_arm64' && fromJSON('["self-hosted", "macOS", "ARM64", "SMA"]') || fromJSON('["self-hosted", "Windows", "X64"]') }}
    env:
      BUILD_IDENTIFIER: "${{ matrix.nodejs-tag[0] }}-${{ inputs.platform-tag }}"
    steps:
      - name: Create status check message
        run: echo STATUS_CHECK_MESSAGE="Test on self hosted (${{ env.BUILD_IDENTIFIER }})" >> $GITHUB_ENV
        shell: bash

      - name: Show job status for commit
        uses: myrotvorets/set-commit-status-action@v2.0.0
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        with:
          sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
          context: ${{ env.STATUS_CHECK_MESSAGE }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}

      # Need to be able to save Docker Hub credentials to keychain
      - if: ${{ inputs.platform-tag == 'macosx_arm64' && inputs.use-server-rc }}
        run: security unlock-keychain -p ${{ secrets.MAC_M1_SELF_HOSTED_RUNNER_PW }}

      - name: Remove aerospike docker image
        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
        run: |
          if docker ps -aq | grep -q .; then
            docker rm -f $(docker ps -aq) || echo "Failed to remove one or more containers."
          else
            echo "No containers to remove."
          fi

      - name: Remove aerospike docker image
        if: ${{ inputs.platform-tag == 'win_amd64' }}
        run: |
          if (docker ps -aq) {
              docker ps -aq | ForEach-Object { docker rm -f $_ } || Write-Host "Failed to remove one or more containers."
          }
          else {
              Write-Host "No containers to remove."
          }

      - uses: ./.github/actions/run-ee-server
        with:
          use-server-rc: ${{ inputs.use-server-rc }}
          server-tag: ${{ inputs.server-tag }}
          docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
          docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

      - name: Download wheel
        uses: actions/download-artifact@v4
        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
        with:
          path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-darwin-arm64/
          name: ${{ env.BUILD_IDENTIFIER }}.node

      - name: Download wheel
        uses: actions/download-artifact@v4
        if: ${{ inputs.platform-tag == 'win_amd64' }}
        with:
          path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-win32-x64/
          name: ${{ env.BUILD_IDENTIFIER }}.node

      - name: Convert Python tag to Python version
        # Don't use sed because we want this command to work on both mac and windows
        # The command used in GNU sed is different than in macOS sed
        run: |
          NODEJS_TAG=${{ matrix.nodejs-tag[0] }}
          NODEJS_VERSION="${NODEJS_TAG/cp/}"
          echo NODEJS_VERSION="${NODEJS_VERSION/3/3.}" >> $GITHUB_ENV
        shell: bash

      - uses: actions/setup-node@v4
        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
        with:
          node-version: ${{ matrix.nodejs-tag[1] }}
          path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-darwin-arm64/

      - uses: actions/setup-node@v4
        if: ${{ inputs.platform-tag == 'win_amd64' }}
        with:
          node-version: ${{ matrix.nodejs-tag[1] }}
          path: ./lib/binding/node-${{ matrix.nodejs-tag[0] }}-win32-x64/


#      - name: Install nvm
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
#          touch ~/.zprofile
#          source ~/.zprofile
#          nvm -v
#        shell: bash
#
#      #- name: Install Node.js 20
#      #  if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#      #  run: |
#      #    nvm i 20
#      #  shell: bash
#
#      - name: Prepare /usr/local/opt directory
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          sudo rm -rf /usr/local/opt
#          sudo mkdir -p /usr/local/opt
#          sudo chown -R $(whoami) /usr/local/opt
#        shell: bash
#
#      - name: Install libuv
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          brew install libuv
#          sudo ln -s /opt/homebrew/opt/libuv/1.45.0/ /usr/local/opt/libuv
#        shell: bash
#
#      - name: Configure OpenSSL
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          rm -rf /usr/local/opt/openssl
#          sudo ln -s /opt/homebrew/opt/openssl@3.4/ /usr/local/opt/openssl
#        shell: bash
#
#      - name: Update PATH and environment variables
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          echo "export PATH=\"/usr/local/bin/:/usr/local/opt/openssl/bin:\$PATH\"" >> ~/.zprofile
#          echo "export LDFLAGS=\"-L/usr/local/opt/openssl/lib\"" >> ~/.zprofile
#          echo "export CPPFLAGS=\"-I/usr/local/opt/openssl/include\"" >> ~/.zprofile
#          echo "export EXT_CFLAGS=\"-I/usr/local/opt/openssl/include\"" >> ~/.zprofile
#        shell: bash
#
#      - name: Source updated environment variables
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          source ~/.zprofile
#        shell: bash

#      - name: Install wheel
#        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
#        run: |
#          ./scripts/build-c-client.sh
#          npm install
#        shell: bash

#      - name: Install wheel
#        if: ${{ inputs.platform-tag == 'win_amd64' }}
#        run: |
#          ./scripts/build-c-client.ps1
#          npm install
#        shell: powershell

      - name: Connect to Docker container on remote machine with Docker daemon
        if: ${{ inputs.platform-tag == 'win_amd64' }}
        # DOCKER_HOST contains the IP address of the remote machine
        run: |
          $env:DOCKER_HOST_IP = $env:DOCKER_HOST | foreach {$_.replace("tcp://","")} | foreach {$_.replace(":2375", "")}
          crudini --set config.conf enterprise-edition hosts ${env:DOCKER_HOST_IP}:3000
        working-directory: .github\workflows

      ## FIGURE OUT WHAT SETUP NEEDS TO HAPPEN
      #- run: |
      #    npm install typescript --save-dev
      #    npx tsc;
      #  working-directory: ts-test
      #  shell: bash

      #- name: Identify binaries
      #  if: ${{ inputs.platform-tag == 'macosx_arm64' }}
      #  run: |
      #    ls ./lib/binding/node-v108-darwin-arm64
      #    ls ./lib/binding/node-v108-darwin-arm64/aerospike.node
      #    mkdir -p build;
      #    mkdir -p build/Release;
      #    cp -r ./lib/binding/node-v108-darwin-arm64 build/Release

      - name: Run tests
        if: ${{ inputs.platform-tag == 'macosx_arm64' }}
        run: |
          docker ps;
          docker logs aerospike;
          cd ts-test;
          npm uninstall tsc;
          npm install ..;
          npm i --save-dev @types/chai;
          npm i --save-dev @types/jest;
          npm i --save-dev @types/mocha;
          npm install mocha;
          rm -rf dist;
          npx tsc;
          cd ..;
          npm install;
          pwd;
          npx tsc;
          npm run test dist/${{ inputs.test-file }} -- --h localhost --port 3000 --U superuser --P superuser;


      - name: Run tests
        if: ${{ inputs.platform-tag == 'win_amd64' }}
        run: |
          docker ps;
          docker logs aerospike;
          cd ts-test;
          npm uninstall tsc;
          npm install ..;
          npm i --save-dev @types/chai;
          npm i --save-dev @types/jest;
          npm i --save-dev @types/mocha;
          npm install mocha;
          npx tsc;
          cp tests\udf.lua dist\udf.lua;
          npx mocha dist -- --h ${env:DOCKER_HOST_IP} --port 3000 --U superuser --P superuser;
          cd ..; 
          npx tsc;


      - name: Show job status for commit
        if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
        uses: myrotvorets/set-commit-status-action@v2.0.0
        with:
          sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
          status: ${{ job.status }}
          context: ${{ env.STATUS_CHECK_MESSAGE }}
